generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id             String            @id @default(uuid())
  email               String            @unique
  password_hash       String
  family_name         String?
  first_name          String?
  phone_number        String?
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  preferred_view_mode String?           @default("list")
  role                UserRole          @default(USER)
  browsingHistories   BrowsingHistory[]
  assignedAdmins      SchoolAdmin[]     @relation("AdminAssigner")
  managedSchools      SchoolAdmin[]
  processedClaims     SchoolClaim[]     @relation("ClaimProcessor")
  schoolClaims        SchoolClaim[]
  lists               UserList[]
  notifications       Notification[]
  sentMessages        Message[]          @relation("MessageSender")
  receivedMessages    MessageRecipient[]
  applications        Application[]
  candidateNotes      CandidateNote[]
  interviews          Interview[]
  interviewFeedbacks  InterviewFeedback[]
  availabilitySlots   AvailabilitySlot[]
  journalEntries      JournalEntry[]
  applicationMessages ApplicationMessage[] @relation("ApplicationMessageSender")
}

model School {
  school_id                                                       String            @id @default(uuid())
  site_id                                                         String            @unique
  name_en                                                         String?
  name_jp                                                         String?
  location_en                                                     String?
  location_jp                                                     String?
  phone_en                                                        String?
  phone_jp                                                        String?
  email_en                                                        String?
  email_jp                                                        String?
  address_en                                                      String?
  address_jp                                                      String?
  curriculum_en                                                   String?
  curriculum_jp                                                   String?
  structured_data                                                 Json              @default("{}")
  created_at                                                      DateTime          @default(now())
  updated_at                                                      DateTime          @updatedAt
  url_en                                                          String?
  url_jp                                                          String?
  logo_id                                                         String?
  image_id                                                        String?
  image_url                                                       String?
  logo_url                                                        String?
  affiliations_en                                                 String[]
  affiliations_jp                                                 String[]
  accreditation_en                                                String[]
  accreditation_jp                                                String[]
  education_programs_offered_en                                   String[]
  education_programs_offered_jp                                   String[]
  education_curriculum_en                                         String?
  education_curriculum_jp                                         String?
  education_academic_support_en                                   String[]
  education_academic_support_jp                                   String[]
  education_extracurricular_activities_en                         String[]
  education_extracurricular_activities_jp                         String[]
  admissions_acceptance_policy_en                                 String?
  admissions_acceptance_policy_jp                                 String?
  admissions_application_guidelines_en                            String?
  admissions_application_guidelines_jp                            String?
  admissions_age_requirements_en                                  String?
  admissions_age_requirements_jp                                  String?
  admissions_fees_en                                              String?
  admissions_fees_jp                                              String?
  admissions_breakdown_fees_application_fee_en                    String?
  admissions_breakdown_fees_application_fee_jp                    String?
  admissions_breakdown_fees_day_care_fee_tuition_en               String?
  admissions_breakdown_fees_day_care_fee_tuition_jp               String?
  admissions_breakdown_fees_day_care_fee_registration_fee_en      String?
  admissions_breakdown_fees_day_care_fee_registration_fee_jp      String?
  admissions_breakdown_fees_day_care_fee_maintenance_fee_en       String?
  admissions_breakdown_fees_day_care_fee_maintenance_fee_jp       String?
  admissions_breakdown_fees_kindergarten_tuition_en               String?
  admissions_breakdown_fees_kindergarten_tuition_jp               String?
  admissions_breakdown_fees_kindergarten_registration_fee_en      String?
  admissions_breakdown_fees_kindergarten_registration_fee_jp      String?
  admissions_breakdown_fees_kindergarten_maintenance_fee_en       String?
  admissions_breakdown_fees_kindergarten_maintenance_fee_jp       String?
  admissions_breakdown_fees_grade_elementary_tuition_en           String?
  admissions_breakdown_fees_grade_elementary_tuition_jp           String?
  admissions_breakdown_fees_grade_elementary_registration_fee_en  String?
  admissions_breakdown_fees_grade_elementary_registration_fee_jp  String?
  admissions_breakdown_fees_grade_elementary_maintenance_fee_en   String?
  admissions_breakdown_fees_grade_elementary_maintenance_fee_jp   String?
  admissions_breakdown_fees_grade_junior_high_tuition_en          String?
  admissions_breakdown_fees_grade_junior_high_tuition_jp          String?
  admissions_breakdown_fees_grade_junior_high_registration_fee_en String?
  admissions_breakdown_fees_grade_junior_high_registration_fee_jp String?
  admissions_breakdown_fees_grade_junior_high_maintenance_fee_en  String?
  admissions_breakdown_fees_grade_junior_high_maintenance_fee_jp  String?
  admissions_breakdown_fees_grade_high_school_tuition_en          String?
  admissions_breakdown_fees_grade_high_school_tuition_jp          String?
  admissions_breakdown_fees_grade_high_school_registration_fee_en String?
  admissions_breakdown_fees_grade_high_school_registration_fee_jp String?
  admissions_breakdown_fees_grade_high_school_maintenance_fee_en  String?
  admissions_breakdown_fees_grade_high_school_maintenance_fee_jp  String?
  admissions_breakdown_fees_summer_school_tuition_en              String?
  admissions_breakdown_fees_summer_school_tuition_jp              String?
  admissions_breakdown_fees_summer_school_registration_fee_en     String?
  admissions_breakdown_fees_summer_school_registration_fee_jp     String?
  admissions_breakdown_fees_summer_school_maintenance_fee_en      String?
  admissions_breakdown_fees_summer_school_maintenance_fee_jp      String?
  admissions_breakdown_fees_other_tuition_en                      String?
  admissions_breakdown_fees_other_tuition_jp                      String?
  admissions_breakdown_fees_other_registration_fee_en             String?
  admissions_breakdown_fees_other_registration_fee_jp             String?
  admissions_breakdown_fees_other_maintenance_fee_en              String?
  admissions_breakdown_fees_other_maintenance_fee_jp              String?
  admissions_procedure_en                                         String?
  admissions_procedure_jp                                         String?
  admissions_language_requirements_students_en                    String?
  admissions_language_requirements_students_jp                    String?
  admissions_language_requirements_parents_en                     String?
  admissions_language_requirements_parents_jp                     String?
  events_en                                                       String[]
  events_jp                                                       String[]
  campus_facilities_en                                            String[]
  campus_facilities_jp                                            String[]
  campus_virtual_tour_en                                          String?
  campus_virtual_tour_jp                                          String?
  student_life_counseling_en                                      String?
  student_life_counseling_jp                                      String?
  student_life_support_services_en                                String[]
  student_life_support_services_jp                                String[]
  student_life_library_en                                         String?
  student_life_library_jp                                         String?
  student_life_calendar_en                                        String?
  student_life_calendar_jp                                        String?
  student_life_tour_en                                            String?
  student_life_tour_jp                                            String?
  employment_open_positions_en                                    String[]
  employment_open_positions_jp                                    String[]
  employment_application_process_en                               String?
  employment_application_process_jp                               String?
  policies_privacy_policy_en                                      String?
  policies_privacy_policy_jp                                      String?
  policies_terms_of_use_en                                        String?
  policies_terms_of_use_jp                                        String?
  staff_staff_list_en                                             String[]
  staff_staff_list_jp                                             String[]
  staff_board_members_en                                          String[]
  staff_board_members_jp                                          String[]
  short_description_en                                            String?
  short_description_jp                                            String?
  description_en                                                  String?
  description_jp                                                  String?
  country_en                                                      String?
  country_jp                                                      String?
  region_en                                                       String?
  region_jp                                                       String?
  geography_en                                                    String?
  geography_jp                                                    String?
  is_verified                                                     Boolean           @default(false)
  verification_date                                               DateTime?
  verified_by                                                     String?
  browsingHistories                                               BrowsingHistory[]
  admins                                                          SchoolAdmin[]
  claims                                                          SchoolClaim[]
  userListSchools                                                 UserListSchools[]
  jobPostings                                                     JobPosting[]
  blockedCountries                                                 BlockedCountry[]
  featuredSlots                                                    FeaturedSlot[]
  // Job postings feature for paywall per school
  job_postings_enabled         Boolean   @default(false)
  job_postings_start           DateTime?
  job_postings_end             DateTime?

  @@index([name_en, name_jp], map: "idx_school_name")
  @@index([location_en, location_jp], map: "idx_school_location")
  @@index([email_en, email_jp], map: "idx_school_email")
  @@index([phone_en, phone_jp], map: "idx_school_phone")
  @@index([created_at, updated_at], map: "idx_school_timestamps")
  @@index([url_en, url_jp], map: "idx_school_url")
  @@index([logo_id], map: "idx_school_logo")
  @@index([image_id], map: "idx_school_image")
  @@index([country_en, country_jp], map: "idx_school_country")
  @@index([region_en, region_jp], map: "idx_school_region")
  @@index([geography_en, geography_jp], map: "idx_school_geography")
}

model UserList {
  list_id    Int               @id @default(autoincrement())
  list_name  String
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  user_id    String
  user       User              @relation(fields: [user_id], references: [user_id])
  schools    UserListSchools[]
}

model UserListSchools {
  list_id   Int
  school_id String
  list      UserList @relation(fields: [list_id], references: [list_id])
  school    School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade)

  @@id([list_id, school_id])
}

model BrowsingHistory {
  history_id Int      @id @default(autoincrement())
  user_id    String
  school_id  String
  viewed_at  DateTime @default(now())
  school     School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [user_id])

  @@index([user_id, school_id], map: "idx_browsing_history_user_school")
}

model SchoolClaim {
  claim_id            Int         @id @default(autoincrement())
  school_id           String
  user_id             String
  status              ClaimStatus @default(PENDING)
  email               String?
  phone_number        String?
  submitted_at        DateTime    @default(now())
  processed_at        DateTime?
  processed_by        String?
  notes               String?
  processor           User?       @relation("ClaimProcessor", fields: [processed_by], references: [user_id])
  school              School      @relation(fields: [school_id], references: [school_id], onDelete: Cascade)
  user                User        @relation(fields: [user_id], references: [user_id])

  @@index([school_id])
  @@index([user_id])
  @@index([status])
}

model SchoolAdmin {
  school_id   String
  user_id     String
  assigned_at DateTime @default(now())
  assigned_by String
  assigner    User     @relation("AdminAssigner", fields: [assigned_by], references: [user_id])
  school      School   @relation(fields: [school_id], references: [school_id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [user_id])

  @@id([school_id, user_id])
  @@index([school_id])
  @@index([user_id])
}

enum UserRole {
  USER
  SCHOOL_ADMIN
  SUPER_ADMIN
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  CLAIM_SUBMITTED
  CLAIM_APPROVED
  CLAIM_REJECTED
  CLAIM_REVOKED
  MESSAGE_RECEIVED
  APPLICATION_STATUS_UPDATED
}

model Notification {
  notification_id Int              @id @default(autoincrement())
  user_id        String
  type           NotificationType
  title          String
  message        String
  url            String?           // link to related page
  is_read        Boolean          @default(false)
  created_at     DateTime         @default(now())
  user           User             @relation(fields: [user_id], references: [user_id])

  @@index([user_id])
  @@index([created_at])
  @@index([is_read])
}

model Message {
  message_id          Int                @id @default(autoincrement())
  sender_id          String
  title              String
  content            String
  created_at         DateTime           @default(now())
  is_broadcast       Boolean            @default(false)
  scheduled_deletion DateTime           @default(dbgenerated("NOW() + INTERVAL '30 days'"))
  sender             User               @relation("MessageSender", fields: [sender_id], references: [user_id])
  recipients         MessageRecipient[]

  @@index([sender_id])
  @@index([created_at])
  @@index([scheduled_deletion])
}

model MessageRecipient {
  message_id Int
  user_id    String
  is_read    Boolean   @default(false)
  read_at    DateTime?
  message    Message   @relation(fields: [message_id], references: [message_id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [user_id])

  @@id([message_id, user_id])
  @@index([user_id])
  @@index([is_read])
}

// Recruitment portal models
model JobPosting {
  id               Int       @id @default(autoincrement())
  schoolId         String
  school           School    @relation(fields: [schoolId], references: [school_id], onDelete: Cascade)
  title            String
  description      String
  requirements     String[]
  location         String
  employmentType   String
  status           String    @default("OPEN")
  isArchived       Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  applications     Application[]
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  IN_PROCESS
  REJECTED
  OFFER
  ACCEPTED_OFFER
  REJECTED_OFFER
  WITHDRAWN
}

enum ApplicationStage {
  SCREENING
  INTERVIEW_INVITATION_SENT
  INTERVIEW
  OFFER
  REJECTED
}

model Application {
  id                Int           @id @default(autoincrement())
  userId            String?
  user              User?         @relation(fields: [userId], references: [user_id])
  jobPostingId      Int
  jobPosting        JobPosting    @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  applicantName     String
  email             String
  phone             String?
  hasJapaneseVisa   Boolean       @default(false)
  comment           String?
  certifications    String[]
  degrees           String[]
  currentResidence  String?
  nationality       String?
  jlpt              String        @default("None")
  resumeUrl         String?
  coverLetter       String?
  status            ApplicationStatus @default(APPLIED)
  currentStage      ApplicationStage  @default(SCREENING)
  submittedAt       DateTime      @default(now())
  notes             CandidateNote[]
  interviews        Interview[]
  availabilitySlots AvailabilitySlot[]
  journalEntries    JournalEntry[]
  offer             Offer?
  interviewLocation String?
  interviewerNames  String[]    @default([])
  rating            Int?        @default(0)  // Candidate overall rating 1-5
  allowCandidateMessages Boolean    @default(false)
  messages          ApplicationMessage[]
}

model CandidateNote {
  id            Int          @id @default(autoincrement())
  applicationId Int
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authorId      String
  author        User         @relation(fields: [authorId], references: [user_id])
  content       String
  createdAt     DateTime     @default(now())
}

model Interview {
  id             Int                @id @default(autoincrement())
  applicationId  Int
  application    Application        @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewerId  String
  interviewer    User               @relation(fields: [interviewerId], references: [user_id])
  scheduledAt    DateTime
  location       String
  status         String             @default("SCHEDULED")
  interviewerNames String[]          @default([])
  feedback       InterviewFeedback[]
}

model InterviewFeedback {
  id           Int        @id @default(autoincrement())
  interviewId  Int
  interview    Interview  @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  authorId     String
  author       User       @relation(fields: [authorId], references: [user_id])
  content      String
  rating       Int?
  createdAt    DateTime   @default(now())
}

model Offer {
  id            Int          @id @default(autoincrement())
  applicationId Int          @unique
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  letterUrl     String
  sentAt        DateTime     @default(now())
  status        String       @default("PENDING")
  responseAt    DateTime?
}

model BlockedCountry {
  id         Int      @id @default(autoincrement())
  schoolId   String
  school     School   @relation(fields: [schoolId], references: [school_id], onDelete: Cascade)
  country    String
  reason     String?
  createdAt  DateTime @default(now())
}

// Availability slots for admin or candidate
model AvailabilitySlot {
  id             Int         @id @default(autoincrement())
  userId         String
  user           User        @relation(fields: [userId], references: [user_id])
  applicationId  Int?        // null for admin-wide slots
  application    Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  date           DateTime    // specific date for this slot
  dayOfWeek      String      // e.g. "Mon", "Tue"
  startTime      String      // e.g. "09:00"
  endTime        String      // e.g. "11:00"
  createdAt      DateTime    @default(now())
}

// Journal entries for a candidate (notes, feedback, system events)
model JournalEntry {
  id            Int          @id @default(autoincrement())
  applicationId Int
  application   Application  @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  authorId      String
  author        User         @relation(fields: [authorId], references: [user_id])
  type          String       // NOTE | FEEDBACK | SYSTEM | JOURNAL
  content       String
  rating        Int?         // optional rating for feedback
  createdAt     DateTime     @default(now())
}

model ApplicationMessage {
  id            Int         @id @default(autoincrement())
  applicationId Int
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  senderId      String
  sender        User        @relation("ApplicationMessageSender", fields: [senderId], references: [user_id])
  content       String
  createdAt     DateTime    @default(now())
}

model FeaturedSlot {
  id         Int      @id @default(autoincrement())
  slotNumber Int      // 1-4 indicating which featured slot
  schoolId   String   // Reference to the school
  school     School   @relation(fields: [schoolId], references: [school_id], onDelete: Cascade)
  startDate  DateTime // Inclusive start date for featuring
  endDate    DateTime // Inclusive end date for featuring
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([slotNumber])
}
